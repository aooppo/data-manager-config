[{"name":"RefundOrder","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"RefundOrder","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":null,"shopifyMapping":"(data)=>data;","shopifyGql":null,"shopifyQueryMapping":null,"gql":null,"note":"同步到Shopify暂时不用，只用同步ERP","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"refunds/create"},{"name":"FulfillmentCreateV2","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"fulfillmentCreateV2","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":null,"shopifyMapping":"(postData) => {\n\tconst data = postData.data;\n\tconst parentData = postData.parentData;\n\tconst fulfillmentOrderId = data.id;\n    let releaseLine = parentData.releaseLine;\n    const lines = data.line_items || [];\n    let fulfillmentOrderLineItems = [];\n    \n    lines.forEach(line => {\n    \tlet vid = line.line_item_id;\n    \tlet fulfillable_quantity = line.fulfillable_quantity;\n        if (vid != null) {\n          let quantity = releaseLine[vid];\n          let id = `gid://shopify/FulfillmentOrderLineItem/${line.id}`;\n          if (quantity > 0 && fulfillable_quantity > 0) {\n             if (quantity > fulfillable_quantity) {\n                let sub = quantity - fulfillable_quantity;\n                quantity = fulfillable_quantity;\n                releaseLine[vid] = sub;\n             }\n             fulfillmentOrderLineItems.push({\n          \t\tid,quantity\n          \t});\n          }\n        }\n    });\n\n\treturn {\n\t\t\"fulfillment\": {\n\t\t\t\"lineItemsByFulfillmentOrder\": {\n\t\t\t\t\"fulfillmentOrderId\": `gid://shopify/FulfillmentOrder/${fulfillmentOrderId}`,\n               fulfillmentOrderLineItems\n\t\t\t},\n            \"trackingInfo\": parentData.trackingInfo\n\t\t},\n       \"message\": \"FROM_DM_MIDDLEWARE\"\n\t}\n}","shopifyGql":"mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n  fulfillmentCreateV2(fulfillment: $fulfillment) {\n    fulfillment {\n      id\n      status\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}","shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"fulfillments/create"},{"name":"Webhook","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"webhooks","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data=>data","shopifyGql":null,"shopifyQueryMapping":"","gql":null,"note":"it's internal type","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"SalesOrder","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":"","crmName":"","shopifyName":"fulfillmentCreateV2","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":true,"twoWaySync":true,"erpMapping":null,"shopifyMapping":"async (data, apiFunc) => {\n    let normal = data.normal;\n    if (typeof normal == 'string') {\n\t\tnormal = JSON.parse(normal);\n    }\n  let api = apiFunc && apiFunc();\n  const rest = api.rest;\n  const entityType = api.entityType;\n\n  const cusApi = rest['FulfillmentOrder'];\n\n  try {\n    const fs = await cusApi.all({session:api.session,   order_id: normal.id });\n    const fuls = fs.data;\n    let fulfillment = [];\n    fuls.forEach(f => {\n      if (f.status != 'closed') {\n      \tfulfillment.push(f);\n      }\n    });\n     return {\n       parentData: normal,\n       data: fulfillment || [], \n       __entityType__: \"FulfillmentCreateV2\"      \n            }\n  }catch(e) {\n    console.log('err', e);\n    return e;\n  }\n\t\n}","shopifyGql":"","shopifyQueryMapping":"","gql":null,"note":"it's internal ","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"orders/updated"},{"name":"FulfillmentCancel","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"fulfillmentCancel","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data=> {\n  return {\n\t  \"id\": `gid://shopify/Fulfillment/${data.id}`\n  }\n}","shopifyGql":"mutation fulfillmentCancel($id: ID!) {\n  fulfillmentCancel(id: $id) {\n    fulfillment {\n      id\n      status\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n","shopifyQueryMapping":null,"gql":null,"note":"","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"MetafieldsSet","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"metafieldsSet","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data =>  {\n  const normal = data.normal;\n  let mfs = normal.metafields;\n  let ms = [];\n\n\n  if (mfs && mfs.length > 0) {\n  \n    for(let i =0; i< mfs.length; i++) {\n      let mf = mfs[i];\n      if (ms.length >= 25) {\n        break;\n      }\n      if(!mf.value) {\n        mf.value=\"_\";\n\t\t//continue;\n      }\n      mf.ownerId = \t\t`gid://shopify/ProductVariant/${normal.id}`;\n      ms.push(mf);\n    }\n     \n  }\n\n  return {\n  \"metafields\": ms\n  }\n}","shopifyGql":"mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n      metafieldsSet(metafields: $metafields) {\n        metafields {\n          key\n          namespace\n          value\n          createdAt\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }","shopifyQueryMapping":null,"gql":null,"note":"MetafieldsSet","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"Customer","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":"","crmName":"","shopifyName":"Customer","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data => {\n    let normal = data.normal;\n    if (typeof normal == 'string') {\n\t\tnormal = JSON.parse(normal);\n    }\n   const addr =  normal.addresses[0];\n\treturn {\n      \t\"__id__\": normal.id,\n        \"id\": normal.id,\n        \"email\" : normal.email,\n        \"first_name\": normal.firstName,\n        \"last_name\": normal.lastName,\n        \"phone\": normal.phone,\n        \"addresses\": [{\n          ...addr,\n          \"first_name\": addr.firstName,\n\t\t  \"last_name\": addr.lastName,\n          \"default\": true\n        }]\n    }\n}","shopifyGql":"","shopifyQueryMapping":"","gql":null,"note":"customers","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"customers/update"},{"name":"Item","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":"","crmName":"","shopifyName":"products","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":null,"shopifyMapping":"data => {\n    let normal = data.normal;\n    if (typeof normal == 'string') {\n\t\tnormal = JSON.parse(normal);\n    }\n\treturn {\n\t\t\"__id__\": normal.id,\n\t\t\"product\": normal\n\t}\n}","shopifyGql":"","shopifyQueryMapping":"(postData) => `title:${postData.product.title}`;","gql":null,"note":"aaa","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"products/update"},{"name":"ProductVariantCreate","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"productVariantCreate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data =>  {\n  const normal = data.normal;\n  let v = normal.variants[0];\n  return {\n  \"input\": {\n    \"price\": v.price,\n    \"title\": normal.title,\n    \"sku\": normal.sku,\n    \"options\": [normal.option1, normal.option2, normal.option3],\n    metafields: normal.metafields,\n    \"productId\": \t`gid://shopify/Product/${normal.product_id}`\n  }\n  }\n}","shopifyGql":"mutation productVariantCreate($input: ProductVariantInput!) {\n      productVariantCreate(input: $input) {\n        product {\n          id\n          title\n        }\n        productVariant {\n          createdAt\n          displayName\n          id\n          inventoryItem {\n            unitCost {\n              amount\n            }\n            tracked\n          }\n          inventoryPolicy\n          inventoryQuantity\n          price\n          product {\n            id\n          }\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }","shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"products/update"},{"name":"ProductVariantUpdate","prefetch":1,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"productVariantUpdate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data =>  {\n  const normal = data.normal;\n  let v = normal.variants[0];\n  return {\n  \"input\": {\n    \"price\": v.price,\n    \"title\": normal.title,\n        \"sku\": normal.sku,\n    \"options\": [normal.option1, normal.option2, normal.option3],\n    \"id\": \t`gid://shopify/ProductVariant/${normal.id}`\n  }\n  }\n}","shopifyGql":"mutation productVariantUpdate($input: ProductVariantInput!) {\n      productVariantUpdate(input: $input) {\n        product {\n          id\n          title\n        }\n        productVariant {\n          createdAt\n          displayName\n          id\n          inventoryItem {\n            unitCost {\n              amount\n            }\n            tracked\n          }\n          inventoryPolicy\n          inventoryQuantity\n          price\n          product {\n            id\n          }\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }","shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null}]